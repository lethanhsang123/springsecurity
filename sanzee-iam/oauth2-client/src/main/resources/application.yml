spring:
  application:
    name: oauth2-client
  r2dbc:
    url: r2dbc:postgresql://127.0.0.1:5432/oauth2_client?schema=public
    username: admin
    password: admin
    name: oauth2_client
    pool:
      enabled: true
      initial-size: 5
      max-size: 20
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  sql:
    init:
      mode: never
      platform: postgres
      continue-on-error: false
      schema-locations: classpath:/datasource/schema.sql
      data-locations: classpath:/datasource/data.sql
      username: admin
      password: admin


#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://127.0.0.1:9000/oauth2/token
#      client:
#        registration:
#          messaging-client-authorization-code:
#            provider: client-provider
#            client-id: relive-client
#            client-secret: relive-client
#            authorization-grant-type: authorization_code
#            redirect-uri: 'http://127.0.0.1:8070/login/oauth2/code/{registrationId}'
#            scope: message.read
#            client-name: messaging-client-authorization-code
#        provider:
#          client-provider:
#            authorization-uri: http://127.0.0.1:9000/oauth2/authorize
#            token-uri: http://127.0.0.1:9000/oauth2/token
server:
  port: 8070
  servlet:
    session:
      cookie:
        name: CLIENT-SESSION
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: TRACE
    org.springframework.security.oauth2: TRACE
    org.springframework.r2dbc: TRACE